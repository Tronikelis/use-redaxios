import{jsx as t}from"react/jsx-runtime";import{createContext as o,useContext as r,useState as e}from"react";import a from"redaxios";import{merge as i}from"merge-anything";import{dequal as n}from"dequal";import{useCustomCompareEffect as s}from"use-custom-compare";import c from"quick-lru";import u from"fast-json-stable-stringify";const d=o({options:{axios:a.defaults}});function l({options:o,children:r}){return t(d.Provider,Object.assign({value:{options:o}},{children:r}),void 0)}const p=({...t})=>u({...t}),m=new c({maxSize:500,maxAge:36e5});function v(t,o={},c){var u;const{options:l}=r(d),[v,y]=e(null!==(u=m.get(p({url:t,relativeUrl:"",type:"get",options:o})))&&void 0!==u?u:void 0),[f,g]=e(!!c),[x,h]=e(void 0),b=async(r,e,s)=>{var c,u;const d=m.get(p({url:t,relativeUrl:e,type:r,body:s,options:o}));d?(y(d),g(!1)):g(!0);const v=i(l,o);v.axios=(null===(c=v.interceptors)||void 0===c?void 0:c.request)?await v.interceptors.request(null!==(u=v.axios)&&void 0!==u?u:{}):v.axios;const[f,x]=await async function(t){try{return[await t,!1]}catch(t){return[t,!0]}}(a({url:t+e,method:r,data:s,...v.axios}));return x?(h(f),b=f,v.onError&&v.onError(b),void g(!1)):(n(f.data,d)||(m.set(p({url:t,relativeUrl:e,type:r,body:s,options:o}),f.data),y(f.data)),h(void 0),(t=>{v.onSuccess&&v.onSuccess(t)})(f.data),g(!1),f.data);var b};s((()=>{Array.isArray(c)&&b("get","")}),[...null!=c?c:[]],n);return{data:v,loading:f,error:x,get:async(t="")=>b("get",t),post:async(t="",o)=>b("post",t,o),del:async(t="")=>b("delete",t),put:async(t="",o)=>b("put",t,o),patch:async(t="",o)=>b("patch",t,o)}}export{l as RedaxiosProvider,v as useRedaxios};
