import{createContext as t,useContext as r,useState as o}from"react";import a from"redaxios";import{merge as n}from"merge-anything";import{dequal as e}from"dequal";import{useCustomCompareEffect as s}from"use-custom-compare";import{jsx as i}from"react/jsx-runtime";const c=t({options:{axios:a.defaults}});function u({options:t,children:r}){return i(c.Provider,Object.assign({value:{options:t}},{children:r}),void 0)}function d(t,i={},u){const{options:d}=r(c),[p,l]=o({}),[m,y]=o(!!u),[f,v]=o(null),x=async(r,o,e)=>{var s,c;const u=n(d,i);y(!0),u.axios=(null===(s=u.interceptors)||void 0===s?void 0:s.request)?await u.interceptors.request(null!==(c=u.axios)&&void 0!==c?c:{}):u.axios;const[p,m]=await async function(t){try{return[await t,!1]}catch(t){return[t,!0]}}(a({url:t+o,method:r,data:e,...u.axios}));return m?(v(p),f=p,u.onError&&u.onError(f),void y(!1)):(l(p.data),v(null),(t=>{u.onSuccess&&u.onSuccess(t)})(p.data),y(!1),p.data);var f};s((()=>{Array.isArray(u)&&x("get","")}),[...null!=u?u:[]],e);return{data:p,loading:m,error:f,get:async(t="")=>x("get",t),post:async(t="",r)=>x("post",t,r),del:async(t="")=>x("delete",t),put:async(t="",r)=>x("put",t,r),patch:async(t="",r)=>x("patch",t,r)}}export{u as RedaxiosProvider,d as useRedaxios};
