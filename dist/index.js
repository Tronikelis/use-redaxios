import{jsx as t}from"react/jsx-runtime";import{createContext as o,useContext as r,useState as e}from"react";import a from"redaxios";import{merge as i}from"merge-anything";import{dequal as n}from"dequal";import{useCustomCompareEffect as s}from"use-custom-compare";import c from"quick-lru";import l from"fast-json-stable-stringify";const u=o({options:{axios:a.defaults}});function p({options:o,children:r}){return t(u.Provider,Object.assign({value:{options:o}},{children:r}),void 0)}const d=({...t})=>l({...t}),m=new c({maxSize:500,maxAge:36e5});function y(t,o={},c){var l;const{options:p}=r(u),[y,v]=e(null!==(l=m.get(d({url:t,relativeUrl:"",type:"get",options:o})))&&void 0!==l?l:void 0),[f,g]=e(!!c),[x,h]=e(void 0),b=async(r,e,s)=>{var c,l;const u=m.get(d({url:t,relativeUrl:e,type:r,body:s,options:o}));u?(console.log(d({url:t,relativeUrl:e,type:r,body:s,options:o})),v(u),g(!1)):g(!0);const y=i(p,o);y.axios=(null===(c=y.interceptors)||void 0===c?void 0:c.request)?await y.interceptors.request(null!==(l=y.axios)&&void 0!==l?l:{}):y.axios;const[f,x]=await async function(t){try{return[await t,!1]}catch(t){return[t,!0]}}(a({url:t+e,method:r,data:s,...y.axios}));return x?(h(f),b=f,y.onError&&y.onError(b),void g(!1)):(n(f.data,u)||(m.set(d({url:t,relativeUrl:e,type:r,body:s,options:o}),f.data),v(f.data)),h(void 0),(t=>{y.onSuccess&&y.onSuccess(t)})(f.data),g(!1),f.data);var b};s((()=>{Array.isArray(c)&&b("get","")}),[...null!=c?c:[]],n);return{data:y,loading:f,error:x,get:async(t="")=>b("get",t),post:async(t="",o)=>b("post",t,o),del:async(t="")=>b("delete",t),put:async(t="",o)=>b("put",t,o),patch:async(t="",o)=>b("patch",t,o)}}export{p as RedaxiosProvider,y as useRedaxios};
